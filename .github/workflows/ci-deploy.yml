name: CI (Terraform plan/apply) and Deploy Java

on:
  push:
    branches:
      - main
    paths:
      - '**/*.tf'
  pull_request:
    paths:
      - '**/*.tf'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # 1) Terraform: plan (runs on PRs and pushes to .tf)
  terraform:
    name: Terraform - Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Terraform Init
        run: terraform init -input=false

      - name: Check terraform fmt
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          terraform plan -input=false -no-color -out=plan.tfplan

      - name: Upload plan artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: plan.tfplan

  # 2) Apply: only on push to main (depends on terraform job)
  apply:
    name: Terraform - Apply (main only)
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: .
    outputs:
      # ジョブ出力として hosts を公開（空文字が fallback）
      hosts: ${{ steps.set-hosts.outputs.hosts || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Terraform Init
        run: terraform init -input=false

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: .

      - name: Terraform Apply
        id: tf_apply
        run: |
          if [ -f plan.tfplan ]; then
            terraform apply -input=false -auto-approve plan.tfplan
          else
            terraform plan -input=false -no-color -out=plan.tfplan
            terraform apply -input=false -auto-approve plan.tfplan
          fi

      - name: Dump terraform outputs (json)
        run: terraform output -json > tf_outputs.json

      - name: Extract public IPs from terraform outputs and set as job output
        id: set-hosts
        run: |
          # adjust the jq path if your output name differs (here: public_ips)
          if jq -e '.public_ips' tf_outputs.json >/dev/null 2>&1; then
            HOSTS=$(jq -r '.public_ips | join(",")' tf_outputs.json)
          else
            # fallback: try common single IP output
            if jq -e '.public_ip' tf_outputs.json >/dev/null 2>&1; then
              HOSTS=$(jq -r '.public_ip.value')
            else
              HOSTS=""
            fi
          fi
          echo "hosts=$HOSTS" >> $GITHUB_OUTPUT

  # 3) Deploy: run Ansible after apply completes successfully
  deploy:
    name: Deploy Java (Ansible)
    runs-on: ubuntu-latest
    needs: apply
    if: ${{ needs.apply.result == 'success' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install "ansible>=7.0" jq

      - name: Prepare SSH private key
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" > ./id_rsa
          chmod 600 ./id_rsa

      - name: Determine hosts (prefer secret, else use terraform output)
        id: compute-hosts
        run: |
          # If HOSTS secret is set, use it. Otherwise use apply job output.
          if [ -n "${{ secrets.HOSTS }}" ]; then
            echo "hosts=${{ secrets.HOSTS }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ needs.apply.outputs.hosts }}" ]; then
            echo "hosts=${{ needs.apply.outputs.hosts }}" >> $GITHUB_OUTPUT
          else
            echo "hosts=" >> $GITHUB_OUTPUT
          fi

      - name: Build inventory from computed hosts
        run: |
          mkdir -p inventory
          echo "[java_servers]" > inventory/hosts.ini
          HOSTS="${{ steps.compute-hosts.outputs.hosts }}"
          if [ -n "$HOSTS" ]; then
            IFS=',' read -ra ADDR <<< "$HOSTS"
            for h in "${ADDR[@]}"; do
              echo "${h} ansible_user=${{ secrets.SSH_USER }}" >> inventory/hosts.ini
            done
            cat inventory/hosts.ini
          else
            echo "No hosts found. Ensure either secrets.HOSTS or terraform outputs.public_ips exist."
            exit 1
          fi

      - name: Add hosts to known_hosts (ssh-keyscan)
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          IFS=',' read -ra ADDR <<< "${{ steps.compute-hosts.outputs.hosts }}"
          for h in "${ADDR[@]}"; do
            ssh-keygen -F "$h" || ssh-keyscan -H "$h" >> ~/.ssh/known_hosts || true
          done
          sed -n '1,10p' ~/.ssh/known_hosts || true

      - name: Run Ansible playbook (install Java)
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          ansible-playbook -i inventory/hosts.ini playbooks/install-java.yml --private-key ./id_rsa

      - name: Cleanup private key (always)
        if: always()
        run: |
          shred -u ./id_rsa || rm -f ./id_rsa
